"""
문제명: H-Index
URL: https://school.programmers.co.kr/learn/courses/30/lessons/42747#fn1

- H-Index를 return하는 함수를 작성하는 것
- H-Index에 대해서 문제에서 조금 헷갈리게 설명을 한 것 같아 wikipedia의 설명에 따라서 조금 설명을 다듬어보면
  "전체 논문 중에서 h회 이상 인용된 논문이 h편 이상일 때, 이를 만족하는 h의 최대값"을 말한다.
- 따라서, 문제에서 주어진 정보를 바탕으로 해석해보면 citations 배열에서 h라는 숫자를 구해야 하는데,
  h 이상인 수가 자신을 포함해서 h개 이상 있어야 한다. 그리고 h가 될 수 있는 수 중에서 최대값을 구해야 한다.

같은 수가 중복되어 존재할 수도 있음

citations = [3, 0, 6, 1, 5]일 때 먼저 정렬을 한다.

citations = [0, 1, 3, 5, 6]

0: 0번 이상 인용된 논문이 5편, 나머지 논문 자체가 없음
1: 1번 이상 인용된 논문이 1편 이상(4편), 나머지 논문은 1번 이하 인용
3: 3번 이상 인용된 논문이 3편 이상(3편), 나머지 논문은 3번 이하 인용
5: 5번 이상 인용된 논문이 5편 이상(2편), 나머지 논문은 5번 이하 인용
6: 6번 이상 인용된 논문이 6편 이상(1편), 나머지 논문은 6번 이하 인용

나머지 논문에 대해서는 정렬을 한 상태에서 현재 위치 미만의 요소들은 모두 해당이 되기 때문에 상관이 없음.
3과 1모두 조건에는 부합한다.
3번 이상 인용된 논문이 3편 이상이고, 1번 이상 인용된 논문이 1편 이상이다.
그러나 이 때 "h번 이상 인용된~"에서 h의 최대값이 h-index가 되는 것이기 때문에
h-index는 3이 된다.

[6, 5, 3, 1, 0]으로 정렬한 상태에서
index를 모두 1씩 큰 수로 설정한다고 생각해보자. 즉, 6의 인덱스는 1인 경우가 된다.
그럼 인덱스가 현재의 수보다 큰 순간 바로 직전 값을 리턴해야 한다.
"""

[6, 5, 4, 4, 3, 1, 0]
def hIndex(citations):
    citations.sort(reverse=True)
    for i in range(len(citations)):
        if citations[i-1] <= i:
            return citations[i-1]
    return citations[len(citations)]

citations = [3, 0, 6, 1, 5]
print(hIndex(citations)) # Output: 3
